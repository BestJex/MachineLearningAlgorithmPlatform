{"remainingRequest":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\detail.vue?vue&type=template&id=6150415d&scoped=true&","dependencies":[{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\detail.vue","mtime":1592804685684},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _vm.status == \"node-selected\"\n      ? _c(\n          \"div\",\n          { staticClass: \"pannel\", attrs: { id: \"node_detailpannel\" } },\n          [\n            _c(\"div\", { staticClass: \"pannel-title\" }, [_vm._v(\"模型详情\")]),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"block-container\" },\n              [\n                _c(\n                  \"el-scrollbar\",\n                  {\n                    staticClass: \"scroll-container\",\n                    attrs: { native: false, noresize: true }\n                  },\n                  [\n                    _c(\n                      \"el-form\",\n                      {\n                        staticClass: \"form\",\n                        style: \"max-height: \" + (_vm.docHeight - 380) + \"px;\",\n                        attrs: { \"label-position\": \"top\" }\n                      },\n                      [\n                        _vm._l(_vm.node_detail, function(node) {\n                          return _c(\n                            \"el-form-item\",\n                            {\n                              key: node.label,\n                              attrs: { label: node.label, prop: \"node.name\" }\n                            },\n                            [\n                              node.type === \"input\"\n                                ? _c(\"el-input\", {\n                                    attrs: { type: \"text\" },\n                                    on: { change: _vm.changeValue },\n                                    model: {\n                                      value: node.value,\n                                      callback: function($$v) {\n                                        _vm.$set(node, \"value\", $$v)\n                                      },\n                                      expression: \"node.value\"\n                                    }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type === \"slider\"\n                                ? _c(\"el-slider\", {\n                                    attrs: {\n                                      \"input-size\": \"mini\",\n                                      \"show-input\": \"\"\n                                    },\n                                    on: { change: _vm.changeValue },\n                                    model: {\n                                      value: node.value,\n                                      callback: function($$v) {\n                                        _vm.$set(node, \"value\", $$v)\n                                      },\n                                      expression: \"node.value\"\n                                    }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type === \"inputNumber\"\n                                ? _c(\"el-input-number\", {\n                                    on: { change: _vm.changeValue },\n                                    model: {\n                                      value: node.value,\n                                      callback: function($$v) {\n                                        _vm.$set(node, \"value\", $$v)\n                                      },\n                                      expression: \"node.value\"\n                                    }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type === \"checkbox\"\n                                ? _c(\"el-checkbox\", {\n                                    on: { change: _vm.changeValue },\n                                    model: {\n                                      value: node.value,\n                                      callback: function($$v) {\n                                        _vm.$set(node, \"value\", $$v)\n                                      },\n                                      expression: \"node.value\"\n                                    }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type == \"selectFile\"\n                                ? _c(\n                                    \"el-select\",\n                                    {\n                                      attrs: { placeholder: \"请选择\" },\n                                      on: { change: _vm.changeValue },\n                                      model: {\n                                        value: node.value,\n                                        callback: function($$v) {\n                                          _vm.$set(node, \"value\", $$v)\n                                        },\n                                        expression: \"node.value\"\n                                      }\n                                    },\n                                    _vm._l(_vm.fileList, function(item) {\n                                      return _c(\"el-option\", {\n                                        key: item.id,\n                                        attrs: {\n                                          label: item.name,\n                                          value: item.id\n                                        }\n                                      })\n                                    }),\n                                    1\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type === \"download\"\n                                ? _c(\n                                    \"div\",\n                                    { staticStyle: { \"text-align\": \"center\" } },\n                                    [\n                                      _c(\n                                        \"el-button\",\n                                        {\n                                          attrs: { plain: \"\", type: \"info\" },\n                                          on: { click: _vm.downloadFile }\n                                        },\n                                        [_vm._v(_vm._s(node.label))]\n                                      )\n                                    ],\n                                    1\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type == \"preview\"\n                                ? _c(\"detail-preview\", {\n                                    attrs: { node_id: _vm.item.getModel().id }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              node.type == \"visualization\"\n                                ? _c(\"visual-file\", {\n                                    directives: [\n                                      {\n                                        name: \"show\",\n                                        rawName: \"v-show\",\n                                        value: !_vm.isShowEcharts,\n                                        expression: \"!isShowEcharts\"\n                                      }\n                                    ],\n                                    attrs: { node_id: _vm.item.getModel().id }\n                                  })\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.point_detail, function(point, index) {\n                          return _c(\n                            \"el-form-item\",\n                            {\n                              directives: [\n                                {\n                                  name: \"show\",\n                                  rawName: \"v-show\",\n                                  value: point.type === \"output\",\n                                  expression: \"point.type === 'output'\"\n                                }\n                              ],\n                              key: point.id,\n                              attrs: { label: \"输出\" + index }\n                            },\n                            [\n                              _c(\n                                \"el-select\",\n                                {\n                                  attrs: { placeholder: \"请选择\" },\n                                  on: { change: _vm.changeValue },\n                                  model: {\n                                    value: point.func,\n                                    callback: function($$v) {\n                                      _vm.$set(point, \"func\", $$v)\n                                    },\n                                    expression: \"point.func\"\n                                  }\n                                },\n                                _vm._l(_vm.point_options, function(item) {\n                                  return _c(\"el-option\", {\n                                    key: item.id,\n                                    attrs: {\n                                      label: item.value,\n                                      value: item.value\n                                    }\n                                  })\n                                }),\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        })\n                      ],\n                      2\n                    )\n                  ],\n                  1\n                )\n              ],\n              1\n            )\n          ]\n        )\n      : _vm._e(),\n    _vm._v(\" \"),\n    _vm.status === \"canvas-selected\"\n      ? _c(\n          \"div\",\n          { staticClass: \"pannel\", attrs: { id: \"canvas_detailpannel\" } },\n          [\n            _c(\"div\", { staticClass: \"pannel-title\" }, [_vm._v(\"画布\")]),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"block-container\" },\n              [\n                _c(\n                  \"el-checkbox\",\n                  {\n                    on: { change: _vm.changeGridState },\n                    model: {\n                      value: _vm.showGrid,\n                      callback: function($$v) {\n                        _vm.showGrid = $$v\n                      },\n                      expression: \"showGrid\"\n                    }\n                  },\n                  [_vm._v(\"网格对齐\")]\n                )\n              ],\n              1\n            )\n          ]\n        )\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}