{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\views\\project\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\views\\project\\index.vue","mtime":1592804685699},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport graphApi from '@/api/graph'\r\nimport userApi from '@/api/user'\r\nimport { Notification } from 'element-ui'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'Project',\r\n  data() {\r\n    return {\r\n      // 查询类\r\n      listQuery: {\r\n        page: 1,\r\n        page_size: 10\r\n      },\r\n      count: 0,\r\n\r\n      isShowDialog: false,\r\n\r\n      project_list: [],\r\n      loading: false,\r\n\r\n      form: {\r\n        projectName: ''\r\n      },\r\n      rules: {\r\n        projectName: [\r\n          { required: true, message: '请输入项目名称', trigger: 'blur' }\r\n        ]\r\n      },\r\n\r\n      multipleSelection: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['token', 'username'])\r\n  },\r\n  filters: {\r\n    statusFilter(status) {\r\n      switch (status) {\r\n        case 'init':\r\n          return '初始化'\r\n        case 'loading':\r\n          return '运行中'\r\n        case 'complete':\r\n          return '已完成'\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getGraphs()\r\n  },\r\n  methods: {\r\n    getGraphs() {\r\n      this.loading = true\r\n      graphApi\r\n        .getGraphs(this.listQuery)\r\n        .then(res => {\r\n          this.count = res.count\r\n          this.project_list = res.res\r\n          this.loading = false\r\n        })\r\n        .catch(err => {\r\n          this.loading = false\r\n        })\r\n    },\r\n    pageSizeChange(val) {\r\n      this.listQuery.page_size = val\r\n      this.listQuery.page = 1\r\n      this.getGraphs()\r\n    },\r\n    pageCurrentChange(val) {\r\n      this.listQuery.page = val\r\n      this.getGraphs()\r\n    },\r\n    createProject() {\r\n      this.$refs['ruleForm'].validate(valid => {\r\n        if (valid) {\r\n          graphApi\r\n            .createGraph(this.form)\r\n            .then(res => {\r\n              Notification({\r\n                title: '成功',\r\n                message: '创建项目成功',\r\n                type: 'success',\r\n                duration: 3000\r\n              })\r\n              this.getGraphs()\r\n              this.isShowDialog = false\r\n              this.form.projectName = ''\r\n              this.form.owner = ''\r\n            })\r\n            .catch(err => {\r\n              Notification({\r\n                title: '错误',\r\n                message: err.data,\r\n                type: 'error',\r\n                duration: 3000\r\n              })\r\n            })\r\n        }\r\n      })\r\n    },\r\n    handleSelectionChange(val) {\r\n      var multipleSelection = []\r\n      val.forEach(item => {\r\n        multipleSelection.push(item.id)\r\n      })\r\n      this.multipleSelection = multipleSelection\r\n      console.log(this.multipleSelection)\r\n    },\r\n    deleteProjects() {\r\n      this.$confirm('此操作将永久删除该项目, 是否继续?', '提示', {\r\n        confirmButtonText: '确 定',\r\n        cancelButtonText: '取 消',\r\n        type: 'warning'\r\n      })\r\n        .then(() => {\r\n          return graphApi.deleteGraphs({ projectIds: this.multipleSelection })\r\n        })\r\n        .then(res => {\r\n          Notification({\r\n            title: '成功',\r\n            message: '文件移除成功',\r\n            type: 'success',\r\n            duration: 3000\r\n          })\r\n          this.getGraphs()\r\n        })\r\n        .catch(err => {\r\n          this.$message({\r\n            type: err == 'cancel' ? 'info' : 'error',\r\n            message: err == 'cancel' ? '已取消删除' : err.data\r\n          })\r\n        })\r\n    },\r\n    logout() {\r\n      this.$store.dispatch('user/Logout').then(res => {\r\n        this.$router.push('/login')\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}