{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\views\\project\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\views\\project\\index.vue","mtime":1592813909479},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport graphApi from '@/api/graph'\nimport userApi from '@/api/user'\nimport {Notification} from 'element-ui'\nimport {mapGetters} from 'vuex'\n\nexport default {\n    name: 'Project',\n    data() {\n        return {\n            // 查询类\n            listQuery: {\n                page: 1,\n                page_size: 10\n            },\n            count: 0,\n\n            isShowDialog: false,\n\n            project_list: [],\n            loading: false,\n\n            form: {\n                projectName: ''\n            },\n            rules: {\n                projectName: [\n                    {required: true, message: '请输入项目名称', trigger: 'blur'}\n                ]\n            },\n\n            multipleSelection: []\n        }\n    },\n    computed: {\n        ...mapGetters(['token', 'username'])\n    },\n    filters: {\n        statusFilter(status) {\n            switch (status) {\n                case 'init':\n                    return '初始化'\n                case 'loading':\n                    return '运行中'\n                case 'complete':\n                    return '已完成'\n            }\n        }\n    },\n    created() {\n        this.getGraphs()\n    },\n    methods: {\n        getGraphs() {\n            this.loading = true\n            graphApi\n                .getGraphs(this.listQuery)\n                .then(res => {\n                    this.count = res.count\n                    this.project_list = res.res\n                    this.loading = false\n                })\n                .catch(err => {\n                    this.loading = false\n                })\n        },\n        pageSizeChange(val) {\n            this.listQuery.page_size = val\n            this.listQuery.page = 1\n            this.getGraphs()\n        },\n        pageCurrentChange(val) {\n            this.listQuery.page = val\n            this.getGraphs()\n        },\n        createProject() {\n            this.$refs['ruleForm'].validate(valid => {\n                if (valid) {\n                    graphApi\n                        .createGraph(this.form)\n                        .then(res => {\n                            Notification({\n                                title: '成功',\n                                message: '创建项目成功',\n                                type: 'success',\n                                duration: 3000\n                            })\n                            this.getGraphs()\n                            this.isShowDialog = false\n                            this.form.projectName = ''\n                            this.form.owner = ''\n                        })\n                        .catch(err => {\n                            Notification({\n                                title: '错误',\n                                message: err.data,\n                                type: 'error',\n                                duration: 3000\n                            })\n                        })\n                }\n            })\n        },\n        handleSelectionChange(val) {\n            var multipleSelection = []\n            val.forEach(item => {\n                multipleSelection.push(item.id)\n            })\n            this.multipleSelection = multipleSelection\n            console.log(this.multipleSelection)\n        },\n        deleteProjects() {\n            this.$confirm('此操作将永久删除该项目, 是否继续?', '提示', {\n                confirmButtonText: '确 定',\n                cancelButtonText: '取 消',\n                type: 'warning'\n            })\n                .then(() => {\n                    return graphApi.deleteGraphs({projectIds: this.multipleSelection})\n                })\n                .then(res => {\n                    Notification({\n                        title: '成功',\n                        message: '文件移除成功',\n                        type: 'success',\n                        duration: 3000\n                    })\n                    this.getGraphs()\n                })\n                .catch(err => {\n                    this.$message({\n                        type: err == 'cancel' ? 'info' : 'error',\n                        message: err == 'cancel' ? '已取消删除' : err.data\n                    })\n                })\n        }\n    }\n}\n",null]}