{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\ItemPanel\\item.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\ItemPanel\\item.vue","mtime":1592804685686},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport eventBus from '@/utils/eventBus'\r\nimport bgImg from '@/assets/bg.jpg'\r\nimport item from '@/statics/item'\r\nimport { mapGetters } from 'vuex'\r\nimport graphApi from '@/api/graph';\r\nexport default {\r\n  data() {\r\n    return {\r\n      page: null,\r\n      command: null,\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n      tree_list: item.tree_list,\r\n\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'name'\r\n      },\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isAllowDrop', 'nodeList'])\r\n  },\r\n  created() {\r\n    this.bindEvent()\r\n  },\r\n  methods: {\r\n    handleElDragStart(node, e) {\r\n      this.offsetX = e.offsetX\r\n      this.offsetY = e.offsetY\r\n    },\r\n    handleElDragEnd(node, _node, p, e) {\r\n      if (this.isAllowDrop) {\r\n        const item = JSON.parse(JSON.stringify(node.data))\r\n        item.template_id = item.id\r\n        let data = {}\r\n        Object.assign(data, item)\r\n        // data.offsetX = this.offsetX\r\n        // data.offsetY = this.offsetY\r\n        if (this.page) {\r\n          const graph = this.page.graph\r\n          // const size = e.target.dataset.size.split(\"*\");\r\n          const xy = graph.getPointByClient(e.x, e.y)\r\n          data.x = xy.x\r\n          data.y = xy.y\r\n          data.size = item.size.split('*').map(Number)\r\n          data.type = 'node'\r\n          this.command.executeCommand('add', [data])\r\n        }\r\n        this.$store.commit('app/SET_ALLOWDROP', false)\r\n      }\r\n    },\r\n    allowDrag(node) {\r\n      return !node.data.is_menu\r\n    },\r\n    allowDrop(node, _node, type) {\r\n      return false\r\n    },\r\n    bindEvent() {\r\n      eventBus.$on('afterAddPage', page => {\r\n        this.page = page\r\n        this.command = page.command\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}