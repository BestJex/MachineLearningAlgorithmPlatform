{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\index.vue","mtime":1592804685684},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport eventBus from '@/utils/eventBus'\r\nimport Grid from '@antv/g6/build/grid'\r\nimport detail from './detail'\r\nexport default {\r\n  data() {\r\n    return {\r\n      status: 'canvas-selected',\r\n      showGrid: false,\r\n      page: {},\r\n      graph: {},\r\n      item: {},\r\n      node: {},\r\n      grid: null,\r\n\r\n      // 后端结点配置项\r\n      node_detail: [\r\n        {\r\n          type: 'input',\r\n          name: 'name',\r\n          label: '名称',\r\n          value: '动画开始节点'\r\n        },\r\n        {\r\n          type: 'input',\r\n          name: 'path',\r\n          label: '路径',\r\n          value: 'C:/Users/Chris/Document'\r\n        },\r\n        {\r\n          type: 'slider',\r\n          name: 'size',\r\n          label: '大小',\r\n          value: 0\r\n        }\r\n      ],\r\n      form: {},\r\n\r\n      // 可拉伸侧边栏\r\n      isActive: false,\r\n      startX: 0,\r\n      endX: 0,\r\n      DEFAULT_DETAIL_WIDTH: 200,\r\n      DEFAULT_RESIZER_RIGHT: 200,\r\n      MAX_DETAIL_WIDTH: 400,\r\n      MIN_DETAIL_WIDTH: 180\r\n    }\r\n  },\r\n  components: {\r\n    detail\r\n  },\r\n  computed: {\r\n    detailWidth: {\r\n      get() {\r\n        return this.$store.getters.detailWidth\r\n      },\r\n      set(val) {\r\n        this.$store.dispatch('app/setDetailPannelWidth', val)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    clickDetailPanel() {\r\n      this.$store.dispatch('app/setIsFocusCanvas', false)\r\n    },\r\n    onResizeMouseDown(e) {\r\n      this.isActive = true\r\n      this.startX = e.clientX\r\n\r\n      let detailpannel = document.getElementById('detailpannel')\r\n      let resizer = document.getElementById('detail-resizer')\r\n\r\n      var preDetailWidth = this.detailWidth\r\n      document.onmousemove = e => {\r\n        this.onResizeMouseMove(e, preDetailWidth, detailpannel, resizer)\r\n      }\r\n\r\n      document.onmouseup = e => {\r\n        this.isActive = false\r\n        var nowDetailpannelWidth = parseInt(\r\n          detailpannel.style.width.replace('px', '')\r\n        )\r\n        if (nowDetailpannelWidth !== this.detailWidth) {\r\n          this.detailWidth = nowDetailpannelWidth\r\n        }\r\n      }\r\n    },\r\n    onResizeMouseMove(e, preDetailWidth, detailpannel, resizer) {\r\n      if (e.witch === 0) {\r\n        this.isActive = false\r\n      }\r\n\r\n      if (this.isActive) {\r\n        this.endX = e.clientX\r\n\r\n        let nowDetailpannelWidth = parseInt(\r\n          detailpannel.style.width.replace('px', '')\r\n        )\r\n        if (\r\n          nowDetailpannelWidth <= this.MAX_DETAIL_WIDTH &&\r\n          nowDetailpannelWidth >= this.MIN_DETAIL_WIDTH\r\n        ) {\r\n          detailpannel.style.width =\r\n            preDetailWidth + this.startX - this.endX + 'px'\r\n          resizer.style.right = preDetailWidth + this.startX - this.endX + 'px'\r\n        }\r\n\r\n        nowDetailpannelWidth = parseInt(\r\n          detailpannel.style.width.replace('px', '')\r\n        )\r\n        let nowResizerRight = parseInt(resizer.style.right.replace('px', ''))\r\n\r\n        if (nowDetailpannelWidth > this.MAX_DETAIL_WIDTH) {\r\n          detailpannel.style.width = `${this.MAX_DETAIL_WIDTH}px`\r\n          resizer.style.right = `${this.MAX_DETAIL_WIDTH}px`\r\n        } else if (\r\n          nowDetailpannelWidth < this.MIN_DETAIL_WIDTH ||\r\n          nowResizerRight < this.MIN_DETAIL_WIDTH\r\n        ) {\r\n          detailpannel.style.width = `${this.MIN_DETAIL_WIDTH}px`\r\n          resizer.style.right = `${this.MIN_DETAIL_WIDTH}px`\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}