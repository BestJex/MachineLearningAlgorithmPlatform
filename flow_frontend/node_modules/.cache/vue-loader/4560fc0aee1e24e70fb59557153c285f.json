{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\detail.vue","mtime":1592804685684},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport eventBus from '@/utils/eventBus'\r\nimport Grid from '@antv/g6/build/grid'\r\nimport detailPreview from './components/preview'\r\nimport visualFile from './components/visualization'\r\nimport graphApi from '@/api/graph'\r\nimport fileApi from '@/api/file'\r\nimport { mapGetters } from 'vuex'\r\nimport configJS from '@/statics/config'\r\nexport default {\r\n  data() {\r\n    return {\r\n      status: 'canvas-selected',\r\n      showGrid: false,\r\n      page: {},\r\n      graph: {},\r\n      item: {},\r\n      node_detail: {},\r\n      point_detail: {},\r\n      point_options: [\r\n        {\r\n          id: 1,\r\n          value: 'select-all'\r\n        },\r\n        {\r\n          id: 2,\r\n          value: 'random-select'\r\n        }\r\n      ],\r\n      grid: null,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['fileList', 'isShowPreview', 'isShowEcharts', 'docHeight']),\r\n    graphId: {\r\n      get() {\r\n        return this.$route.params.id || this.$store.getters.graphId\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    detailPreview,\r\n    visualFile\r\n  },\r\n  created() {\r\n    this.init()\r\n    this.bindEvent()\r\n  },\r\n  methods: {\r\n    init() {},\r\n    bindEvent() {\r\n      let self = this\r\n      eventBus.$on('afterAddPage', page => {\r\n        self.page = page\r\n        self.graph = self.page.graph\r\n        eventBus.$on('nodeselectchange', item => {\r\n          if (item.select === true && item.target.getType() === 'node') {\r\n            self.status = 'node-selected'\r\n            self.item = item.target\r\n            console.log(item.target.getModel())\r\n            // 存入vuex\r\n            this.$store.commit(\r\n              'app/SET_SETSELECTEDNODEID',\r\n              item.target.getModel().id\r\n            )\r\n            self.node_detail = item.target.getModel().node_detail\r\n            self.point_detail = item.target.getModel().point_detail\r\n          } else {\r\n            self.status = 'canvas-selected'\r\n            this.$store.commit('app/SET_SETSELECTEDNODEID', null)\r\n            self.item = null\r\n            self.node = null\r\n            self.node_detail = null\r\n            self.point_detail = null\r\n          }\r\n        })\r\n      })\r\n    },\r\n    downloadFile() {\r\n      location.href = `${configJS.BASE_API}download_file?graphId=${this.graphId}&nodeId=${\r\n        this.item.getModel().id\r\n      }`\r\n    },\r\n    changeValue(e) {\r\n      const model = {\r\n        node_detail: this.node_detail\r\n      }\r\n      this.graph.update(this.item, model)\r\n    },\r\n    changeGridState(value) {\r\n      if (value) {\r\n        this.grid = new Grid()\r\n        this.graph.addPlugin(this.grid)\r\n      } else {\r\n        this.graph.removePlugin(this.grid)\r\n      }\r\n    },\r\n    saveDetail() {\r\n      const loading = this.$loading({\r\n        lock: true,\r\n        text: '保存中',\r\n        spinner: 'el-icon-loading',\r\n        background: 'rgba(0, 0, 0, 0.8)'\r\n      })\r\n      let graph = this.graph.save()\r\n      Object.assign(graph, { id: this.graphId })\r\n      graphApi\r\n        .sendGraph({ graph: JSON.stringify(graph) })\r\n        .then(res => {\r\n          loading.close()\r\n        })\r\n        .catch(err => {\r\n          console.error(err)\r\n          loading.close()\r\n        })\r\n    }\r\n  }\r\n}\r\n",null]}