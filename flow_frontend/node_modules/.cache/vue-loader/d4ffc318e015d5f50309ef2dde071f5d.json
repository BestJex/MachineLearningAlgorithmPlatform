{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Toolbar\\components\\fileManage.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Toolbar\\components\\fileManage.vue","mtime":1592804685688},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport fileApi from '@/api/file'\r\nimport { Notification } from 'element-ui'\r\nimport { mapGetters } from 'vuex'\r\nimport configJS from '@/statics/config'\r\nexport default {\r\n  name: 'file-mange',\r\n  data() {\r\n    return {\r\n      uploadData: {\r\n        graphId: 0\r\n      },\r\n      base_api: configJS.BASE_API\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['fileList', 'token']),\r\n    graphId: {\r\n      get() {\r\n        return this.$route.params.id || this.$store.getters.graphId\r\n      }\r\n    },\r\n    'uploadData.graphId': {\r\n      get() {\r\n        return this.$route.params.id || this.$store.getters.graphId\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    graph: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  created() {\r\n    this.uploadData.graphId = this.graphId\r\n  },\r\n  methods: {\r\n    handleRemove(file, fileList) {\r\n      fileApi.deleteFile({ id: file.id }).then(res => {\r\n        // 通知成功\r\n        Notification({\r\n          title: '成功',\r\n          message: '文件移除成功',\r\n          type: 'success',\r\n          duration: 3000\r\n        })\r\n        this.$store.commit('app/SET_FILELIST', res.data)\r\n      })\r\n    },\r\n    beforeRemove(file, fileList) {\r\n      return new Promise((resolve, reject) => {\r\n        this.$confirm(`确定移除 ${file.name}？`)\r\n          .then(res => {\r\n            return fileApi.isFilenamehValid({ filename: file.name, graphId: this.graphId })\r\n          })\r\n          .then(res => {\r\n            if (res.data) {\r\n              resolve()\r\n            } else {\r\n              Notification({\r\n                title: '错误',\r\n                message: '文件不存在或文件路径不正确',\r\n                type: 'error',\r\n                duration: 3000\r\n              })\r\n              reject()\r\n            }\r\n          })\r\n          .catch(err => {\r\n            return reject()\r\n          })\r\n      })\r\n    },\r\n    beforeUpload(file) {\r\n      return new Promise((resolve, reject) => {\r\n        fileApi\r\n          .isFilenamehValid({ filename: file.name, graphId: this.graphId })\r\n          .then(res => {\r\n            if (res.data) {\r\n              // 存在重名文件\r\n              return this.$confirm(`文件 ${file.name} 已存在，确认覆盖吗？`)\r\n            } else {\r\n              console.log('不存在重名');\r\n              return resolve()\r\n            }\r\n          })\r\n          .then(res => {\r\n            console.log('确认覆盖');\r\n            return resolve()\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            return reject()\r\n          })\r\n      })\r\n    },\r\n    onUploadSucc(res, file, fileList) {\r\n      Notification({\r\n        title: '成功',\r\n        message: '文件上传成功',\r\n        type: 'success',\r\n        duration: 3000\r\n      })\r\n      this.$store.commit('app/SET_FILELIST', res.data)\r\n    },\r\n    onUploadErr(res, file, fileList) {\r\n      console.log(res)\r\n    }\r\n  }\r\n}\r\n",null]}