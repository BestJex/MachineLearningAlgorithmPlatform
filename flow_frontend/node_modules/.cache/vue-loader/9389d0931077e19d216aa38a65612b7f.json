{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Page\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Page\\index.vue","mtime":1592805574067},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport G6 from '@antv/g6/build/g6'\nimport {initBehavors} from '@/behavior'\nimport {mapGetters} from 'vuex'\nimport graphApi from '@/api/graph'\nimport {Message} from 'element-ui'\n\nexport default {\n    data() {\n        return {\n            pageId: 'graph-container',\n            graph: null,\n            data: null,\n            max_id: 0\n        }\n    },\n    computed: {\n        ...mapGetters(['canvasHeight', 'canvasWidth', 'itemWidth', 'detailWidth']),\n        id: {\n            get() {\n                const graphId = this.$route.params.id;\n                this.$store.commit('app/SET_GRAPHID', graphId)\n                return graphId\n            },\n            set(val) {\n                this.$store.commit('app/SET_GRAPHID', val)\n            }\n        },\n        isRunning: {\n            get() {\n                return this.$store.state.app.is_running\n            },\n            set(val) {\n                this.$store.commit('app/SET_ISRUNNING', val)\n            }\n        },\n    },\n    watch: {\n        canvasWidth: function (val) {\n            this.graph.changeSize(val, this.canvasHeight)\n        },\n        canvasHeight: function (val) {\n            // eslint-disable-next-line no-console\n            console.log('canvas height change detected: ', val)\n            this.graph.changeSize(this.canvasWidth, val)\n        }\n    },\n    created() {\n        initBehavors()\n        this.getGraph()\n        this.$store.dispatch('app/getProjectFileList', this.id)\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.init()\n        })\n    },\n    methods: {\n        getGraph() {\n            graphApi\n                .getGraphById({graphId: this.id})\n                .then(res => {\n                    this.data = res.data\n                    this.isRunning = this.data.status == 'loading'\n                    this.forEach(this.data)\n                    this.$store.commit('app/SET_MAXID', this.max_id)\n                    this.graph.read(this.data)\n                    if (this.data.nodes.length) {\n                        this.graph.fitView(100)\n                    }\n                })\n                .catch(err => {\n                    Message({\n                        message: err.data,\n                        type: 'error',\n                        duration: 3 * 1000\n                    })\n                    this.$router.push('/')\n                })\n        },\n        forEach(json) {\n            for (const val in json) {\n                if (val === 'id' && typeof json[val] === 'string') {\n                    this.max_id = Math.max(\n                        this.max_id,\n                        parseInt(json[val].replace(/[^0-9]/gi, ''))\n                    )\n                }\n                if (typeof json[val] == 'object' && json[val] !== null) {\n                    this.forEach(json[val])\n                }\n            }\n        },\n        init() {\n            const height = this.canvasHeight\n            const width = this.canvasWidth\n\n            this.graph = new G6.Graph({\n                container: 'graph-container',\n                height: height,\n                width: width,\n                modes: {\n                    // 支持的 behavior\n                    default: [\n                        'drag-canvas',\n                        // \"brush-select\",\n                        'drag-select',\n                        'canvas-zoom',\n                        'hover-node',\n                        'drag-node',\n                        'select-node',\n                        'hover-edge',\n                        'keyboard',\n                        'add-menu'\n                    ],\n                    moveCanvas: ['drag-canvas'],\n                    multiSelect: [\n                        {\n                            type: 'drag-select',\n                            trigger: 'drag'\n                        }\n                    ],\n                    addEdge: ['add-edge']\n                    // moveNode: ['drag-item']\n                }\n            })\n            const {editor, command} = this.$parent\n            editor.emit('afterAddPage', {graph: this.graph, command})\n\n            this.readData()\n        },\n        readData() {\n            let data = this.data\n            if (data) {\n                this.graph.read(data)\n            }\n        },\n        clickCanvas() {\n            this.$store.dispatch('app/setIsFocusCanvas', true)\n        },\n        // eslint-disable-next-line no-unused-vars\n        handleDrop(e) {\n            this.$store.commit('app/SET_ALLOWDROP', true)\n        }\n    }\n}\n",null]}