{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\add-edge.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\add-edge.js","mtime":1592805501430},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport eventBus from \"@/utils/eventBus\"; // eslint-disable-next-line no-unused-vars\n\nimport { uniqueId } from '@/utils';\nimport store from \"@/store\";\nvar startPoint = null;\nvar startPointId = null;\nvar startItem = null;\nvar endPoint = {};\nvar activeItem = null;\nvar curInPoint = null;\nexport default {\n  getEvents: function getEvents() {\n    return {\n      mousemove: 'onMousemove',\n      mouseup: 'onMouseup',\n      'node:mouseover': 'onMouseover',\n      'node:mouseleave': 'onMouseleave'\n    };\n  },\n  onMouseup: function onMouseup(e) {\n    // todo 去重\n    var item = e.item;\n\n    if (item && item.getType() === 'node') {\n      var group = item.getContainer();\n\n      if (e.target._attrs.isInPoint) {\n        var children = group._cfg.children;\n        children.map(function (child) {\n          if (child._attrs.isInPointOut && child._attrs.parent === e.target._attrs.id) {\n            activeItem = child;\n          }\n        });\n        curInPoint = e.target;\n      } else if (e.target._attrs.isInPointOut) {\n        activeItem = e.target;\n        var _children = group._cfg.children;\n\n        _children.map(function (child) {\n          if (child._attrs.isInPoint && child._attrs.id === e.target._attrs.parent) {\n            curInPoint = child;\n          }\n        });\n      }\n\n      if (curInPoint) {\n        // 判断该入点是否已经被连接\n        var t_edges = this.graph.findAll('edge', function (edge) {\n          return edge.getModel().endPointId === curInPoint._attrs.id;\n        }); // 判断该入点是否是该node的入点\n\n        var is_inpoint_in_startNode = curInPoint._cfg.parent.get('item') === startItem;\n\n        if (!t_edges.length && activeItem && !is_inpoint_in_startNode) {\n          var endX = parseInt(curInPoint._attrs.x);\n          var endY = parseInt(curInPoint._attrs.y);\n          endPoint = {\n            x: endX,\n            y: endY\n          };\n\n          if (this.edge) {\n            this.graph.removeItem(this.edge);\n            store.dispatch('app/uniqueId');\n            var model = {\n              id: 'edge' + store.state.app.max_id,\n              source: startItem,\n              target: item,\n              // sourceId: startItem._cfg.id,\n              // targetId: item._cfg.id,\n              start: startPoint,\n              end: endPoint,\n              startPointId: startPointId,\n              endPointId: curInPoint._attrs.id,\n              shape: 'customEdge',\n              type: 'edge' // eslint-disable-next-line no-console\n\n            };\n            console.log('add item');\n            eventBus.$emit('addItem', model);\n          }\n        } else if (this.edge) {\n          this.graph.removeItem(this.edge);\n        }\n      } else if (this.edge) {\n        this.graph.removeItem(this.edge);\n      }\n    } else if (this.edge) {\n      this.graph.removeItem(this.edge);\n    }\n\n    this.graph.find(\"node\", function (node) {\n      var group = node.get('group');\n      var children = group._cfg.children;\n      children.map(function (child) {\n        if (child._attrs.isInPointOut) {\n          child.attr(\"opacity\", \"0\");\n          child._attrs.fillStyle = '#1890ff';\n        }\n\n        if (child._attrs.isInPoint) {\n          child.attr(\"opacity\", \"0\");\n        }\n\n        if (child._attrs.isOutPoint) {\n          child.attr(\"opacity\", \"0\");\n          child.attr(\"fill\", \"#fff\");\n        }\n\n        if (child._attrs.isOutPointText) {\n          child.attr('opacity', 0);\n        }\n      });\n    });\n\n    if (startItem) {\n      this.graph.setItemState(startItem, 'hover', false);\n    }\n\n    this.graph.paint();\n    startPoint = null;\n    startPointId = null;\n    startItem = null;\n    endPoint = {};\n    activeItem = null;\n    curInPoint = null;\n    this.graph.setMode('default');\n  },\n  onMousemove: function onMousemove(e) {\n    var _this = this;\n\n    var item = e.item;\n\n    if (!startPoint && e.target._attrs.isOutPoint) {\n      var startX = parseInt(e.target._attrs.x);\n      var startY = parseInt(e.target._attrs.y);\n      startPoint = {\n        x: startX,\n        y: startY\n      };\n      startPointId = e.target._attrs.parent ? e.target._attrs.parent : e.target._attrs.id; // eslint-disable-next-line no-console\n\n      console.log(e.target, startPoint);\n      startItem = item;\n      this.graph.find(\"node\", function (node) {\n        var group = node.get('group');\n        var children = group._cfg.children;\n        children.map(function (child) {\n          // 为连接点设置样式，已经连接过的入点显示红色\n          var c_item = child._attrs;\n\n          if (c_item.isInPointOut) {\n            child.attr(\"opacity\", \"0.3\");\n          }\n\n          if (c_item.isInPoint) {\n            child.attr(\"opacity\", \"1\");\n          }\n\n          if (child._cfg.parent.get('item') === startItem) {\n            if (c_item.isInPointOut || c_item.isInPoint) {\n              child.attr('opacity', '0');\n            }\n          }\n\n          if (c_item.isInPoint || c_item.isInPointOut) {\n            _this.graph.find('edge', function (edge) {\n              var t_endPointId = edge.getModel().endPointId;\n\n              if (c_item.id === t_endPointId || c_item.parent === t_endPointId) {\n                if (c_item.isInPointOut) {\n                  child.attr('opacity', '0');\n                } else {\n                  child.attr('opacity', '0');\n                }\n              }\n            });\n          }\n        });\n      });\n      this.edge = this.graph.addItem('edge', {\n        source: item,\n        target: item,\n        start: startPoint,\n        end: startPoint,\n        shape: 'link-edge'\n      });\n    } else {\n      var point = {\n        x: e.x,\n        y: e.y\n      };\n\n      if (this.edge) {\n        // 增加边的过程中，移动时边跟着移动\n        this.graph.updateItem(this.edge, {\n          //  start: startPoint,\n          target: point\n        });\n      }\n    }\n  },\n  onMouseover: function onMouseover(e) {\n    var item = e.item;\n\n    if (item && item.getType() === 'node') {\n      if (e.target._attrs.isInPointOut && !this.hasTran) {\n        e.target.transform([['t', 0, 3], ['s', 1.2, 1.2]]);\n        this.hasTran = true;\n      }\n\n      this.graph.paint();\n    }\n  },\n  onMouseleave: function onMouseleave() {\n    this.graph.find(\"node\", function (node) {\n      var group = node.get('group');\n      var children = group._cfg.children;\n      children.map(function (child) {\n        if (child._attrs.isInPointOut) {\n          child.resetMatrix();\n        }\n      });\n    });\n    this.hasTran = false;\n    this.graph.paint();\n  }\n};",null]}