{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\detail.vue","mtime":1592804685684},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"W:\\\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport eventBus from '@/utils/eventBus';\nimport Grid from '@antv/g6/build/grid';\nimport detailPreview from \"./components/preview\";\nimport visualFile from \"./components/visualization\";\nimport graphApi from '@/api/graph';\nimport fileApi from '@/api/file';\nimport { mapGetters } from 'vuex';\nimport configJS from '@/statics/config';\nexport default {\n  data: function data() {\n    return {\n      status: 'canvas-selected',\n      showGrid: false,\n      page: {},\n      graph: {},\n      item: {},\n      node_detail: {},\n      point_detail: {},\n      point_options: [{\n        id: 1,\n        value: 'select-all'\n      }, {\n        id: 2,\n        value: 'random-select'\n      }],\n      grid: null\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['fileList', 'isShowPreview', 'isShowEcharts', 'docHeight']), {\n    graphId: {\n      get: function get() {\n        return this.$route.params.id || this.$store.getters.graphId;\n      }\n    }\n  }),\n  components: {\n    detailPreview: detailPreview,\n    visualFile: visualFile\n  },\n  created: function created() {\n    this.init();\n    this.bindEvent();\n  },\n  methods: {\n    init: function init() {},\n    bindEvent: function bindEvent() {\n      var _this = this;\n\n      var self = this;\n      eventBus.$on('afterAddPage', function (page) {\n        self.page = page;\n        self.graph = self.page.graph;\n        eventBus.$on('nodeselectchange', function (item) {\n          if (item.select === true && item.target.getType() === 'node') {\n            self.status = 'node-selected';\n            self.item = item.target;\n            console.log(item.target.getModel()); // 存入vuex\n\n            _this.$store.commit('app/SET_SETSELECTEDNODEID', item.target.getModel().id);\n\n            self.node_detail = item.target.getModel().node_detail;\n            self.point_detail = item.target.getModel().point_detail;\n          } else {\n            self.status = 'canvas-selected';\n\n            _this.$store.commit('app/SET_SETSELECTEDNODEID', null);\n\n            self.item = null;\n            self.node = null;\n            self.node_detail = null;\n            self.point_detail = null;\n          }\n        });\n      });\n    },\n    downloadFile: function downloadFile() {\n      location.href = \"\".concat(configJS.BASE_API, \"download_file?graphId=\").concat(this.graphId, \"&nodeId=\").concat(this.item.getModel().id);\n    },\n    changeValue: function changeValue(e) {\n      var model = {\n        node_detail: this.node_detail\n      };\n      this.graph.update(this.item, model);\n    },\n    changeGridState: function changeGridState(value) {\n      if (value) {\n        this.grid = new Grid();\n        this.graph.addPlugin(this.grid);\n      } else {\n        this.graph.removePlugin(this.grid);\n      }\n    },\n    saveDetail: function saveDetail() {\n      var loading = this.$loading({\n        lock: true,\n        text: '保存中',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.8)'\n      });\n      var graph = this.graph.save();\n      Object.assign(graph, {\n        id: this.graphId\n      });\n      graphApi.sendGraph({\n        graph: JSON.stringify(graph)\n      }).then(function (res) {\n        loading.close();\n      }).catch(function (err) {\n        console.error(err);\n        loading.close();\n      });\n    }\n  }\n};",null]}