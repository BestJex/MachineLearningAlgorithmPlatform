{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\utils\\request.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\utils\\request.js","mtime":1592804685697},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport jwt from '@/utils/jwt';\nimport store from '@/store';\nimport router from '@/router';\nimport configJS from '@/statics/config';\nimport { Message, MessageBox } from 'element-ui';\nimport auth from '@/utils/auth'; // 创建axios实例\n\nvar service = axios.create({\n  // baseURL: process.env.BASE_API, // api的base_url\n  baseURL: configJS.BASE_API,\n  withCredentials: true // timeout: 15000                  // 请求超时时间\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  if (auth.getToken()) {\n    // 验证token是否过期\n    var payload = jwt.payload_decode(auth.getToken());\n    var now = Date.parse(new Date());\n\n    if (now / 1000 > payload.exp) {\n      store.dispatch('user/Logout');\n      router.push('/login');\n      return Promise.reject({\n        response: {\n          data: \"signature expire\"\n        }\n      });\n    }\n\n    config.headers['Authorization'] = 'JWT ' + auth.getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // respone拦截器\n\nservice.interceptors.response.use(function (res) {\n  /**\r\n  * code为非200是抛错 可结合自己业务进行修改\r\n  */\n  if (res.status == 202 || res.status == 201 || res.status == 200) {\n    // Promise.resolve(res.data)\n    return Promise.resolve(res.data);\n  } else {\n    Message({\n      message: res.data,\n      type: 'error',\n      duration: 3 * 1000\n    });\n    return Promise.reject(res.data);\n  }\n}, function (error) {\n  // Message({\n  //   message: error,\n  //   type: 'error',\n  //   duration: 5 * 1000\n  // });\n  return Promise.reject(error.response.data);\n});\nexport default service;",null]}