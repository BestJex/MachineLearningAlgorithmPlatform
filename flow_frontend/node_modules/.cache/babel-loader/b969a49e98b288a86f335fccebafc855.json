{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Toolbar\\components\\fileManage.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Toolbar\\components\\fileManage.vue","mtime":1592804685688},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"W:\\\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport fileApi from '@/api/file';\nimport { Notification } from 'element-ui';\nimport { mapGetters } from 'vuex';\nimport configJS from '@/statics/config';\nexport default {\n  name: 'file-mange',\n  data: function data() {\n    return {\n      uploadData: {\n        graphId: 0\n      },\n      base_api: configJS.BASE_API\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['fileList', 'token']), {\n    graphId: {\n      get: function get() {\n        return this.$route.params.id || this.$store.getters.graphId;\n      }\n    },\n    'uploadData.graphId': {\n      get: function get() {\n        return this.$route.params.id || this.$store.getters.graphId;\n      }\n    }\n  }),\n  props: {\n    graph: {\n      type: Object,\n      required: true\n    }\n  },\n  created: function created() {\n    this.uploadData.graphId = this.graphId;\n  },\n  methods: {\n    handleRemove: function handleRemove(file, fileList) {\n      var _this = this;\n\n      fileApi.deleteFile({\n        id: file.id\n      }).then(function (res) {\n        // 通知成功\n        Notification({\n          title: '成功',\n          message: '文件移除成功',\n          type: 'success',\n          duration: 3000\n        });\n\n        _this.$store.commit('app/SET_FILELIST', res.data);\n      });\n    },\n    beforeRemove: function beforeRemove(file, fileList) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.$confirm(\"\\u786E\\u5B9A\\u79FB\\u9664 \".concat(file.name, \"\\uFF1F\")).then(function (res) {\n          return fileApi.isFilenamehValid({\n            filename: file.name,\n            graphId: _this2.graphId\n          });\n        }).then(function (res) {\n          if (res.data) {\n            resolve();\n          } else {\n            Notification({\n              title: '错误',\n              message: '文件不存在或文件路径不正确',\n              type: 'error',\n              duration: 3000\n            });\n            reject();\n          }\n        }).catch(function (err) {\n          return reject();\n        });\n      });\n    },\n    beforeUpload: function beforeUpload(file) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        fileApi.isFilenamehValid({\n          filename: file.name,\n          graphId: _this3.graphId\n        }).then(function (res) {\n          if (res.data) {\n            // 存在重名文件\n            return _this3.$confirm(\"\\u6587\\u4EF6 \".concat(file.name, \" \\u5DF2\\u5B58\\u5728\\uFF0C\\u786E\\u8BA4\\u8986\\u76D6\\u5417\\uFF1F\"));\n          } else {\n            console.log('不存在重名');\n            return resolve();\n          }\n        }).then(function (res) {\n          console.log('确认覆盖');\n          return resolve();\n        }).catch(function (err) {\n          console.log(err);\n          return reject();\n        });\n      });\n    },\n    onUploadSucc: function onUploadSucc(res, file, fileList) {\n      Notification({\n        title: '成功',\n        message: '文件上传成功',\n        type: 'success',\n        duration: 3000\n      });\n      this.$store.commit('app/SET_FILELIST', res.data);\n    },\n    onUploadErr: function onUploadErr(res, file, fileList) {\n      console.log(res);\n    }\n  }\n};",null]}