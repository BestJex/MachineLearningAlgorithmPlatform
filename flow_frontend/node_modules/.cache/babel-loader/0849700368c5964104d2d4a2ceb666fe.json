{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\mixin\\socket.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\mixin\\socket.js","mtime":1592804685690},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { Notification } from 'element-ui';\nimport eventBus from '@/utils/eventBus';\nimport store from '@/store';\nimport configJS from '@/statics/config';\nvar graph = null;\nexport default {\n  beforeMount: function beforeMount() {\n    console.log('before mount');\n    eventBus.$on('afterAddPage', function (page) {\n      graph = page.graph;\n    });\n  },\n  initWebSocket: function initWebSocket() {\n    this.websock = new WebSocket(configJS.WS_API);\n    this.websock.onopen = this.websocketOnOpen;\n    this.websock.onerror = this.websocketOnError;\n    this.websock.onmessage = this.websocketOnMessage;\n    this.websock.onclose = this.websocketClose;\n  },\n  websocketOnOpen: function websocketOnOpen() {\n    console.log('websocket connected');\n  },\n  websocketOnError: function websocketOnError() {\n    console.log('websocket error');\n  },\n  websocketOnMessage: function websocketOnMessage(res) {\n    var msg = JSON.parse(res.data).msg;\n\n    if (msg === 'complete') {\n      store.commit('app/SET_ISRUNNING', false);\n      Notification({\n        title: '成功',\n        message: '项目运行成功',\n        type: 'success',\n        duration: 3000\n      });\n    } else {\n      var nodeId = msg.nodeId;\n      var status = msg.status;\n      var item = graph.findById(nodeId);\n      var model = {\n        status: status\n      };\n      graph.update(item, model);\n    }\n  },\n  websocketClose: function websocketClose(val) {\n    if (this.websock) {\n      this.websock.send(JSON.stringify({\n        msg: 'close'\n      }));\n      this.websock = null;\n      console.log('websocket disconnect');\n    }\n  },\n  websocketSend: function websocketSend(data) {\n    this.websock.send(JSON.stringify({\n      data: data\n    }));\n  }\n};",null]}