{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Page\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Page\\index.vue","mtime":1592805574067},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"W:\\\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"W:\\\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport G6 from '@antv/g6/build/g6';\nimport { initBehavors } from '@/behavior';\nimport { mapGetters } from 'vuex';\nimport graphApi from '@/api/graph';\nimport { Message } from 'element-ui';\nexport default {\n  data: function data() {\n    return {\n      pageId: 'graph-container',\n      graph: null,\n      data: null,\n      max_id: 0\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['canvasHeight', 'canvasWidth', 'itemWidth', 'detailWidth']), {\n    id: {\n      get: function get() {\n        var graphId = this.$route.params.id;\n        this.$store.commit('app/SET_GRAPHID', graphId);\n        return graphId;\n      },\n      set: function set(val) {\n        this.$store.commit('app/SET_GRAPHID', val);\n      }\n    },\n    isRunning: {\n      get: function get() {\n        return this.$store.state.app.is_running;\n      },\n      set: function set(val) {\n        this.$store.commit('app/SET_ISRUNNING', val);\n      }\n    }\n  }),\n  watch: {\n    canvasWidth: function canvasWidth(val) {\n      this.graph.changeSize(val, this.canvasHeight);\n    },\n    canvasHeight: function canvasHeight(val) {\n      // eslint-disable-next-line no-console\n      console.log('canvas height change detected: ', val);\n      this.graph.changeSize(this.canvasWidth, val);\n    }\n  },\n  created: function created() {\n    initBehavors();\n    this.getGraph();\n    this.$store.dispatch('app/getProjectFileList', this.id);\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.init();\n    });\n  },\n  methods: {\n    getGraph: function getGraph() {\n      var _this2 = this;\n\n      graphApi.getGraphById({\n        graphId: this.id\n      }).then(function (res) {\n        _this2.data = res.data;\n        _this2.isRunning = _this2.data.status == 'loading';\n\n        _this2.forEach(_this2.data);\n\n        _this2.$store.commit('app/SET_MAXID', _this2.max_id);\n\n        _this2.graph.read(_this2.data);\n\n        if (_this2.data.nodes.length) {\n          _this2.graph.fitView(100);\n        }\n      }).catch(function (err) {\n        Message({\n          message: err.data,\n          type: 'error',\n          duration: 3 * 1000\n        });\n\n        _this2.$router.push('/');\n      });\n    },\n    forEach: function forEach(json) {\n      for (var val in json) {\n        if (val === 'id' && typeof json[val] === 'string') {\n          this.max_id = Math.max(this.max_id, parseInt(json[val].replace(/[^0-9]/gi, '')));\n        }\n\n        if (_typeof(json[val]) == 'object' && json[val] !== null) {\n          this.forEach(json[val]);\n        }\n      }\n    },\n    init: function init() {\n      var height = this.canvasHeight;\n      var width = this.canvasWidth;\n      this.graph = new G6.Graph({\n        container: 'graph-container',\n        height: height,\n        width: width,\n        modes: {\n          // 支持的 behavior\n          default: ['drag-canvas', // \"brush-select\",\n          'drag-select', 'canvas-zoom', 'hover-node', 'drag-node', 'select-node', 'hover-edge', 'keyboard', 'add-menu'],\n          moveCanvas: ['drag-canvas'],\n          multiSelect: [{\n            type: 'drag-select',\n            trigger: 'drag'\n          }],\n          addEdge: ['add-edge'] // moveNode: ['drag-item']\n\n        }\n      });\n      var _this$$parent = this.$parent,\n          editor = _this$$parent.editor,\n          command = _this$$parent.command;\n      editor.emit('afterAddPage', {\n        graph: this.graph,\n        command: command\n      });\n      this.readData();\n    },\n    readData: function readData() {\n      var data = this.data;\n\n      if (data) {\n        this.graph.read(data);\n      }\n    },\n    clickCanvas: function clickCanvas() {\n      this.$store.dispatch('app/setIsFocusCanvas', true);\n    },\n    // eslint-disable-next-line no-unused-vars\n    handleDrop: function handleDrop(e) {\n      this.$store.commit('app/SET_ALLOWDROP', true);\n    }\n  }\n};",null]}