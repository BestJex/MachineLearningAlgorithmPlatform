{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\utils\\jwt.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\utils\\jwt.js","mtime":1592804685697},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nexport default {\n  payload_decode: function payload_decode(utf8_token) {\n    // validation\n    if (typeof utf8_token !== 'string') throw 'Invalid token specified';\n    var arr = utf8_token.split('.');\n    if (arr.length != 3) throw 'Illegal JWT token.';\n    var payload = arr[1]; // decode\n\n    var decoded = payload.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n    switch (decoded.length % 4) {\n      case 0:\n        break;\n\n      case 2:\n        decoded += \"==\";\n        break;\n\n      case 3:\n        decoded += \"=\";\n        break;\n\n      default:\n        throw \"Illegal base64url string!\";\n    } // atob\n\n\n    var result = function (input) {\n      var str = String(input).replace(/=+$/, '');\n      if (str.length % 4 == 1) throw \"The string to be decoded is not correctly encoded.\";\n      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n      for (var bc = 0, bs, buffer, idx = 0, output = ''; buffer = str.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n        buffer = chars.indexOf(buffer);\n      }\n\n      return output;\n    }(decoded).replace(/(.)/g, function (_, p) {\n      var code = p.charCodeAt(0).toString(16).toUpperCase();\n      return '%' + (code.length < 2 ? '0' + code : code);\n    });\n\n    return JSON.parse(decodeURIComponent(result));\n  }\n};",null]}