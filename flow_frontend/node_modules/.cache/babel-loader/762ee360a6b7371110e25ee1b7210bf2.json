{"remainingRequest":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Toolbar\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Toolbar\\index.vue","mtime":1592804685689},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"W:\\\\\\u5357\\u5F00\\u5927\\u5B66\\u4EBA\\u5DE5\\u667A\\u80FD\\u5F00\\u653E\\u5E73\\u53F0\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _toConsumableArray from \"W:\\\\\\u5357\\u5F00\\u5927\\u5B66\\u4EBA\\u5DE5\\u667A\\u80FD\\u5F00\\u653E\\u5E73\\u53F0\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"W:\\\\\\u5357\\u5F00\\u5927\\u5B66\\u4EBA\\u5DE5\\u667A\\u80FD\\u5F00\\u653E\\u5E73\\u53F0\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport eventBus from '@/utils/eventBus';\nimport Util from '@antv/g6/src/util';\nimport { uniqueId, getBox } from '@/utils';\nimport graphApi from '@/api/graph';\nimport { mapGetters } from 'vuex';\nimport { Notification } from 'element-ui';\nimport fileManage from \"./components/fileManage\";\nimport nodeManage from \"./components/nodeManage\";\nexport default {\n  data: function data() {\n    return {\n      page: {},\n      graph: {},\n      redoList: [],\n      undoList: [],\n      editor: null,\n      command: null,\n      selectedItem: [],\n      multiSelect: false,\n      addGroup: false,\n      isShowFileManagement: false,\n      max_id: 0\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['isAllowSave', 'selectedNodeId']), {\n    isRunning: {\n      get: function get() {\n        return this.$store.state.app.is_running;\n      },\n      set: function set(val) {\n        this.$store.commit('app/SET_ISRUNNING', val);\n      }\n    },\n    isShowNodeManage: {\n      get: function get() {\n        return this.$store.state.app.is_show_node_manage;\n      },\n      set: function set(val) {\n        this.$store.commit('app/SET_ISSHOWNODEMANAGE', val);\n      }\n    },\n    graphId: {\n      get: function get() {\n        return this.$route.params.id || this.$store.getters.graphId;\n      }\n    }\n  }),\n  components: {\n    fileManage: fileManage,\n    nodeManage: nodeManage\n  },\n  created: function created() {\n    this.init();\n    this.bindEvent();\n  },\n  watch: {\n    selectedItem: function selectedItem(val) {\n      if (val && val.length > 1) {\n        this.addGroup = true;\n      } else {\n        this.addGroup = false;\n      }\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this$$parent = this.$parent,\n          editor = _this$$parent.editor,\n          command = _this$$parent.command;\n      this.editor = editor;\n      this.command = command;\n    },\n    bindEvent: function bindEvent() {\n      var _this = this;\n\n      var self = this;\n      eventBus.$on('afterAddPage', function (page) {\n        self.page = page;\n        self.graph = self.page.graph;\n      });\n      eventBus.$on('add', function (data) {\n        _this.redoList = data.redoList;\n        _this.undoList = data.undoList;\n      });\n      eventBus.$on('update', function (data) {\n        _this.redoList = data.redoList;\n        _this.undoList = data.undoList;\n      });\n      eventBus.$on('delete', function (data) {\n        _this.redoList = data.redoList;\n        _this.undoList = data.undoList;\n      });\n      eventBus.$on('updateItem', function (item) {\n        _this.command.executeCommand('update', [item]);\n      });\n      eventBus.$on('addItem', function (item) {\n        _this.command.executeCommand('add', [item]);\n      });\n      eventBus.$on('nodeselectchange', function () {\n        var _this$selectedItem;\n\n        _this.selectedItem = _this.graph.findAllByState('node', 'selected');\n        _this.selectedItem = (_this$selectedItem = _this.selectedItem).concat.apply(_this$selectedItem, _toConsumableArray(_this.graph.findAllByState('edge', 'selected')));\n      });\n      eventBus.$on('deleteItem', function () {\n        _this.handleDelete();\n      });\n      eventBus.$on('muliteSelectEnd', function () {\n        _this.multiSelect = false;\n        _this.selectedItem = _this.graph.findAllByState('node', 'selected');\n      });\n      eventBus.$on('undo', function () {\n        _this.handleUndo();\n      });\n      eventBus.$on('redo', function () {\n        _this.handleRedo();\n      });\n      eventBus.$on('save', function () {\n        _this.handleSave();\n      });\n      eventBus.$on('selectAll', function () {\n        _this.handleSelectAll();\n      });\n    },\n    handleUndo: function handleUndo() {\n      if (this.undoList.length > 0) this.command.undo();\n    },\n    handleRedo: function handleRedo() {\n      if (this.redoList.length > 0) this.command.redo();\n    },\n    forEach: function forEach(json) {\n      for (var val in json) {\n        if (val === 'id' && typeof json[val] === 'string') {\n          this.max_id = Math.max(this.max_id, parseInt(json[val].replace(/[^0-9]/gi, '')));\n        }\n\n        if (_typeof(json[val]) == 'object' && json[val] !== null) {\n          this.forEach(json[val]);\n        }\n      }\n    },\n    handleSave: function handleSave() {\n      var _this2 = this;\n\n      if (this.isAllowSave) {\n        this.$store.commit('app/SET_ALLOWSAVE', false);\n        var loading = this.$loading({\n          lock: true,\n          text: '保存中',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.8)'\n        });\n        var graph = this.graph.save();\n        Object.assign(graph, {\n          id: this.graphId\n        });\n        graphApi.sendGraph({\n          graph: JSON.stringify(graph)\n        }).then(function (res) {\n          // 通知成功\n          Notification({\n            title: '成功',\n            message: '保存成功',\n            type: 'success',\n            duration: 3000\n          });\n        }).then(function () {\n          return graphApi.getGraphById({\n            graphId: _this2.graphId\n          });\n        }).then(function (res) {\n          var data = res.data;\n\n          _this2.forEach(data);\n\n          _this2.$store.commit('app/SET_MAXID', _this2.max_id);\n\n          _this2.graph.read(data);\n\n          if (data.nodes.length) {\n            _this2.graph.fitView(100);\n          }\n\n          loading.close();\n        }).catch(function (err) {\n          loading.close();\n          Notification({\n            title: '错误',\n            message: err,\n            type: 'error',\n            duration: 3000\n          });\n        });\n      }\n    },\n    handleDelete: function handleDelete() {\n      if (this.selectedItem.length > 0) {\n        this.command.executeCommand('delete', this.selectedItem);\n        this.selectedItem = [];\n      }\n    },\n    getFormatPadding: function getFormatPadding() {\n      return Util.formatPadding(this.graph.get('fitViewPadding'));\n    },\n    getViewCenter: function getViewCenter() {\n      var padding = this.getFormatPadding();\n      var graph = this.graph;\n      var width = this.graph.get('width');\n      var height = graph.get('height');\n      return {\n        x: (width - padding[2] - padding[3]) / 2 + padding[3],\n        y: (height - padding[0] - padding[2]) / 2 + padding[0]\n      };\n    },\n    handleZoomIn: function handleZoomIn() {\n      var currentZoom = this.graph.getZoom();\n      this.graph.zoomTo(currentZoom + 0.5, this.getViewCenter());\n    },\n    handleZoomOut: function handleZoomOut() {\n      var currentZoom = this.graph.getZoom();\n      this.graph.zoomTo(currentZoom - 0.5, this.getViewCenter());\n    },\n    handleToBack: function handleToBack() {\n      var _this3 = this;\n\n      if (this.selectedItem && this.selectedItem.length > 0) {\n        this.selectedItem.forEach(function (item) {\n          item.toBack();\n\n          _this3.graph.paint();\n        });\n      }\n    },\n    handleToFront: function handleToFront() {\n      var _this4 = this;\n\n      if (this.selectedItem && this.selectedItem.length > 0) {\n        this.selectedItem.forEach(function (item) {\n          if (item.getType() === 'edge') {// const nodeGroup = this.graph.get(\"nodeGroup\");\n            // const edgeGroup = item.get(\"group\");\n            // nodeGroup.toFront();\n            // edgeGroup.toFront()\n          } else {\n            item.toFront();\n          }\n\n          _this4.graph.paint();\n        });\n      }\n    },\n    handleAutoZoom: function handleAutoZoom() {\n      this.graph.fitView(20);\n    },\n    handleResetZoom: function handleResetZoom() {\n      this.graph.zoomTo(1, this.getViewCenter());\n    },\n    handleMuiltSelect: function handleMuiltSelect() {\n      this.multiSelect = true;\n      this.graph.setMode('multiSelect');\n    },\n    handleAddGroup: function handleAddGroup() {//TODO 这部分等阿里更新Group之后添加\n      // const model = {\n      //   id: \"group\" + store.state.app.max_id,\n      //   title: \"新建分组\"\n      // };\n      // // this.command.executeCommand(\"add\", \"group\", model);\n      // this.selectedItem.forEach(item => {\n      //   console.log(item);\n      // });\n      //this.getPosition(this.selectedItem);\n    },\n    getPosition: function getPosition(items) {\n      var boxList = [];\n      items.forEach(function (item) {\n        var box = item.getBBox();\n        boxList.push(getBox(box.x, box.y, box.width, box.height));\n      });\n      var minX1, minY1, MaxX2, MaxY2;\n      boxList.forEach(function (box) {\n        if (typeof minX1 == 'undefined') {\n          minX1 = box.x1;\n        }\n\n        if (typeof minY1 == 'undefined') {\n          minY1 = box.y1;\n        }\n\n        if (typeof MaxX2 == 'undefined') {\n          MaxX2 = box.x2;\n        }\n\n        if (typeof MaxY2 == 'undefined') {\n          MaxY2 = box.y2;\n        }\n\n        if (minX1 > box.x1) {\n          minX1 = box.x1;\n        }\n\n        if (minY1 > box.y1) {\n          minY1 = box.y1;\n        }\n\n        if (MaxX2 < box.x2) {\n          MaxX2 = box.x2;\n        }\n\n        if (MaxY2 < box.y2) {\n          MaxY2 = box.y2;\n        }\n      });\n      this.$store.dispatch('app/uniqueId');\n      var width = MaxX2 - minX1,\n          height = MaxY2 - minY1,\n          x = minX1 + width / 2,\n          y = minY1 + height / 2,\n          id = 'team' + this.$store.state.app.max_id;\n      var model = {\n        id: id,\n        width: width,\n        height: height,\n        x: x,\n        y: y,\n        shape: 'teamNode'\n      };\n      this.command.executeCommand('add', model); // const item = this.graph.findById(id);\n      // item.get(\"group\").toBack();\n      // const edgeGroup = this.graph.get(\"edgeGroup\");\n      // edgeGroup.toFront();\n      // this.graph.paint();\n    },\n    handleSelectAll: function handleSelectAll() {\n      var _this5 = this;\n\n      var nodes = this.graph.findAll('node', function (node) {\n        return true;\n      });\n      Util.each(nodes, function (node) {\n        _this5.graph.setItemState(node, 'selected', true);\n      });\n      var edges = this.graph.findAll('edge', function (edge) {\n        return true;\n      });\n      Util.each(edges, function (edge) {\n        _this5.graph.setItemState(edge, 'selected', true);\n      });\n      this.selectedItem = nodes;\n      console.log(this.selectedItem);\n      this.graph.paint();\n    },\n    consoleData: function consoleData() {\n      var data = this.graph.save();\n      Object.assign(data, {\n        id: 1\n      }); // graphApi.uploadJson(data).then(res => {\n      //   console.log(res)\n      // })\n\n      console.log(JSON.stringify(data));\n    },\n    runProject: function runProject() {\n      var _this6 = this;\n\n      var graph = this.graph.save();\n      Object.assign(graph, {\n        id: this.graphId\n      });\n      graphApi.runProject({\n        graph: JSON.stringify(graph)\n      }).then(function (res) {\n        console.log('正在运行');\n        _this6.isRunning = true;\n      }).catch(function (err) {\n        Notification({\n          title: '错误',\n          message: err.data,\n          type: 'error',\n          duration: 3000\n        });\n        _this6.isRunning = false;\n      });\n    },\n    runNode: function runNode() {\n      var _this7 = this;\n\n      var graph = this.graph.save();\n      Object.assign(graph, {\n        id: this.graphId\n      });\n      graphApi.runNode({\n        graph: JSON.stringify(graph),\n        nodeId: this.selectedNodeId\n      }).then(function (res) {\n        console.log('正在运行');\n        _this7.isRunning = true;\n      }).catch(function (err) {\n        Notification({\n          title: '错误',\n          message: err.data,\n          type: 'error',\n          duration: 3000\n        });\n        _this7.isRunning = false;\n      });\n    },\n    addNode: function addNode() {}\n  }\n};",null]}