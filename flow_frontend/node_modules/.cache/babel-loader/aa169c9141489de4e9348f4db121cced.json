{"remainingRequest":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\drag-select.js","dependencies":[{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\drag-select.js","mtime":1592804685680},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport Util from '@antv/g6/src/util';\nimport eventBus from \"@/utils/eventBus\";\nvar min = Math.min;\nvar max = Math.max;\nvar abs = Math.abs;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      brushStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n    };\n  },\n  getEvents: function getEvents() {\n    var trigger; // 检测输入是否合法\n\n    if (ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1) {\n      trigger = this.trigger;\n    } else {\n      trigger = DEFAULT_TRIGGER;\n      console.warn('Behavior brush-select的trigger参数不合法，请输入drag、shift、ctrl或alt');\n    }\n\n    if (trigger === 'drag') {\n      return {\n        mousedown: 'onMouseDown',\n        mousemove: 'onMouseMove',\n        mouseup: 'onMouseUp',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      mousedown: 'onMouseDown',\n      mousemove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      'canvas:click': 'clearStates',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown'\n    };\n  },\n  onMouseDown: function onMouseDown(e) {\n    // 按在node上面拖动时候不应该是框选\n    var item = e.item;\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    var brush = this.brush;\n\n    if (!brush) {\n      brush = this._createBrush();\n    }\n\n    this.originPoint = {\n      x: e.canvasX,\n      y: e.canvasY\n    };\n    brush.attr({\n      width: 0,\n      height: 0\n    });\n    brush.show();\n    this.dragging = true;\n  },\n  onMouseMove: function onMouseMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this._updateBrush(e);\n\n    this.graph.paint();\n  },\n  onMouseUp: function onMouseUp(e) {\n    if (!this.brush && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    var graph = this.graph;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    this.brush.destroy();\n    this.brush = null;\n\n    this._getSelectedNodes(e);\n\n    eventBus.$emit('muliteSelectEnd');\n    this.dragging = false;\n    this.graph.paint();\n    graph.setAutoPaint(autoPaint);\n\n    if (this.trigger === 'drag') {\n      this.graph.setMode('default');\n    }\n  },\n  clearStates: function clearStates() {\n    var graph = this.graph;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var selectedState = this.selectedState;\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    this.onDeselect && this.onDeselect(this.selectedNodes, this.selectedEdges);\n    graph.emit('nodeselectchange', {\n      targets: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n    eventBus.$emit('nodeselectchange', {\n      targets: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n  },\n  _getSelectedNodes: function _getSelectedNodes(e) {\n    var _this = this;\n\n    var graph = this.graph;\n    var state = this.selectedState;\n    var originPoint = this.originPoint;\n    var p1 = {\n      x: e.x,\n      y: e.y\n    };\n    var p2 = graph.getPointByCanvas(originPoint.x, originPoint.y);\n    var left = min(p1.x, p2.x);\n    var right = max(p1.x, p2.x);\n    var top = min(p1.y, p2.y);\n    var bottom = max(p1.y, p2.y);\n    var selectedNodes = [];\n    var shouldUpdate = this.shouldUpdate;\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      var bbox = node.getBBox();\n\n      if (bbox.centerX >= left && bbox.centerX <= right && bbox.centerY >= top && bbox.centerY <= bottom) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n    this.onSelect && this.onSelect(selectedNodes, selectedEdges);\n    graph.emit('nodeselectchange', {\n      targets: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  _createBrush: function _createBrush() {\n    var self = this;\n    var brush = self.graph.get('canvas').addShape('rect', {\n      attrs: self.brushStyle,\n      capture: false\n    });\n    this.brush = brush;\n    return brush;\n  },\n  _updateBrush: function _updateBrush(e) {\n    var originPoint = this.originPoint;\n    this.brush.attr({\n      width: abs(e.canvasX - originPoint.x),\n      height: abs(e.canvasY - originPoint.y),\n      x: min(e.canvasX, originPoint.x),\n      y: min(e.canvasY, originPoint.y)\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    } // 按住control键时，允许用户设置trigger为ctrl\n    // console.log(code)\n\n\n    if (code.toLowerCase() === this.trigger.toLowerCase() || code.toLowerCase() === 'control') {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.brush) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的brush\n      this.brush.destroy();\n      this.brush = null;\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};",null]}