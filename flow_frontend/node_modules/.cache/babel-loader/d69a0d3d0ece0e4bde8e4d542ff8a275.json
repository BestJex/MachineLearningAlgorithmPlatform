{"remainingRequest":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\mulit-select.js","dependencies":[{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\mulit-select.js","mtime":1592804685681},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\南开大学人工智能开放平台\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"W:\\\\\\u5357\\u5F00\\u5927\\u5B66\\u4EBA\\u5DE5\\u667A\\u80FD\\u5F00\\u653E\\u5E73\\u53F0\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Util from '@antv/g6/src/util';\nimport eventBus from \"@/utils/eventBus\";\nimport { uniqueId, getBox } from '@/utils';\nimport config from \"../global\";\nimport store from \"@/store\";\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {};\n  },\n  getEvents: function getEvents() {\n    return {\n      'canvas:mouseenter': 'onCanvasMouseenter',\n      'canvas:mousedown': 'onCanvasMousedown',\n      mousemove: 'onMousemove',\n      mouseup: 'onMouseup'\n    };\n  },\n  onCanvasMouseenter: function onCanvasMouseenter() {\n    // console.log(this.graph.get('canvas'));\n    var canvas = document.getElementById('graph-container').children[0];\n    canvas.style.cursor = 'crosshair'; // this.graph.paint();\n  },\n  onCanvasMousedown: function onCanvasMousedown(e) {\n    var attrs = config.delegateStyle;\n    var width = 0,\n        height = 0,\n        x = e.x,\n        y = e.y;\n    var parent = this.graph.get('group');\n    store.dispatch('app/uniqueId');\n    this.shape = parent.addShape('rect', {\n      attrs: _objectSpread({\n        id: 'rect' + store.state.app.max_id,\n        width: width,\n        height: height,\n        x: x,\n        y: y\n      }, attrs)\n    });\n  },\n  onMousemove: function onMousemove(e) {\n    if (this.shape) {\n      var width = e.x - this.shape._attrs.x;\n      var height = e.y - this.shape._attrs.y;\n      this.shape.attr({\n        width: width,\n        height: height\n      });\n      this.graph.paint();\n    }\n  },\n  onMouseup: function onMouseup() {\n    var _this = this;\n\n    var canvas = document.getElementById('graph-container').children[0];\n    canvas.style.cursor = 'default';\n    var selected = this.graph.findAllByState('node', 'selected');\n    Util.each(selected, function (node) {\n      _this.graph.setItemState(node, 'selected', false);\n\n      eventBus.$emit('nodeselectchange', {\n        target: node,\n        select: false\n      });\n    });\n\n    if (this.shape) {\n      this.addTeam();\n      this.shape.remove();\n      this.shape = null;\n    }\n\n    this.graph.paint();\n    eventBus.$emit('muliteSelectEnd');\n    this.graph.setMode('default');\n  },\n  addTeam: function addTeam() {\n    var _this2 = this;\n\n    var _this$shape$_attrs = this.shape._attrs,\n        x = _this$shape$_attrs.x,\n        y = _this$shape$_attrs.y,\n        width = _this$shape$_attrs.width,\n        height = _this$shape$_attrs.height;\n\n    var _getBox = getBox(x, y, width, height),\n        x1 = _getBox.x1,\n        y1 = _getBox.y1,\n        x2 = _getBox.x2,\n        y2 = _getBox.y2;\n\n    this.graph.findAll('node', function (node) {\n      var _node$getBBox = node.getBBox(),\n          nodeX = _node$getBBox.x,\n          nodeY = _node$getBBox.y,\n          nodeWidth = _node$getBBox.width,\n          nodeHeight = _node$getBBox.height;\n\n      var nodeBox = getBox(nodeX, nodeY, nodeWidth, nodeHeight);\n\n      if (x2 >= nodeBox.x1 && nodeBox.x1 >= x1 && x2 >= nodeBox.x2 && nodeBox.x2 >= x1 && y2 >= nodeBox.y1 && nodeBox.y1 >= y1 && y2 >= nodeBox.y2 && nodeBox.y2 >= y1) {\n        _this2.graph.setItemState(node, 'selected', true);\n      }\n    });\n  }\n};",null]}