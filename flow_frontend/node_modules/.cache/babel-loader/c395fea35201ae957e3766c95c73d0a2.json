{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\select-node.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\select-node.js","mtime":1592804685681},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Util from '@antv/g6/src/util';\nimport eventBus from \"@/utils/eventBus\";\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      multiple: true,\n      keyCode: 17\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:click': 'onClick',\n      'canvas:click': 'onCanvasClick',\n      'canvas:mouseover': 'onCanvasMouseover',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown'\n    };\n  },\n  onClick: function onClick(e) {\n    var self = this;\n    var item = e.item;\n    var graph = self.graph;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var selectedEdges = graph.findAllByState('edge', 'selected');\n    Util.each(selectedEdges, function (edge) {\n      graph.setItemState(edge, 'selected', false);\n    });\n\n    if (!self.keydown || !self.multiple) {\n      var selected = graph.findAllByState('node', 'selected');\n      Util.each(selected, function (node) {\n        if (node !== item) {\n          graph.setItemState(node, 'selected', false);\n        }\n      });\n    }\n\n    if (item.hasState('selected')) {\n      if (self.shouldUpdate.call(self, e)) {\n        graph.setItemState(item, 'selected', false);\n      }\n\n      eventBus.$emit('nodeselectchange', {\n        target: item,\n        select: false\n      });\n    } else {\n      if (self.shouldUpdate.call(self, e)) {\n        graph.setItemState(item, 'selected', true);\n      }\n\n      eventBus.$emit('nodeselectchange', {\n        target: item,\n        select: true\n      });\n    }\n\n    graph.setAutoPaint(autoPaint);\n    graph.paint();\n  },\n  onCanvasClick: function onCanvasClick() {\n    var graph = this.graph;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var selected = graph.findAllByState('node', 'selected');\n    Util.each(selected, function (node) {\n      graph.setItemState(node, 'selected', false);\n      eventBus.$emit('nodeselectchange', {\n        target: node,\n        select: false\n      });\n    });\n    var selectedEdges = graph.findAllByState('edge', 'selected');\n    Util.each(selectedEdges, function (edge) {\n      graph.setItemState(edge, 'selected', false);\n      eventBus.$emit('nodeselectchange', {\n        target: edge,\n        select: false\n      });\n    });\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n  },\n  onCanvasMouseover: function onCanvasMouseover() {\n    var graph = this.graph;\n    graph.paint();\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.keyCode || e.which;\n\n    if (code === this.keyCode) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    this.keydown = false;\n  }\n};",null]}