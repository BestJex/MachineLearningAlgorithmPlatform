{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\DetailPanel\\index.vue","mtime":1592804685684},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport eventBus from '@/utils/eventBus';\nimport Grid from '@antv/g6/build/grid';\nimport detail from \"./detail\";\nexport default {\n  data: function data() {\n    return {\n      status: 'canvas-selected',\n      showGrid: false,\n      page: {},\n      graph: {},\n      item: {},\n      node: {},\n      grid: null,\n      // 后端结点配置项\n      node_detail: [{\n        type: 'input',\n        name: 'name',\n        label: '名称',\n        value: '动画开始节点'\n      }, {\n        type: 'input',\n        name: 'path',\n        label: '路径',\n        value: 'C:/Users/Chris/Document'\n      }, {\n        type: 'slider',\n        name: 'size',\n        label: '大小',\n        value: 0\n      }],\n      form: {},\n      // 可拉伸侧边栏\n      isActive: false,\n      startX: 0,\n      endX: 0,\n      DEFAULT_DETAIL_WIDTH: 200,\n      DEFAULT_RESIZER_RIGHT: 200,\n      MAX_DETAIL_WIDTH: 400,\n      MIN_DETAIL_WIDTH: 180\n    };\n  },\n  components: {\n    detail: detail\n  },\n  computed: {\n    detailWidth: {\n      get: function get() {\n        return this.$store.getters.detailWidth;\n      },\n      set: function set(val) {\n        this.$store.dispatch('app/setDetailPannelWidth', val);\n      }\n    }\n  },\n  methods: {\n    clickDetailPanel: function clickDetailPanel() {\n      this.$store.dispatch('app/setIsFocusCanvas', false);\n    },\n    onResizeMouseDown: function onResizeMouseDown(e) {\n      var _this = this;\n\n      this.isActive = true;\n      this.startX = e.clientX;\n      var detailpannel = document.getElementById('detailpannel');\n      var resizer = document.getElementById('detail-resizer');\n      var preDetailWidth = this.detailWidth;\n\n      document.onmousemove = function (e) {\n        _this.onResizeMouseMove(e, preDetailWidth, detailpannel, resizer);\n      };\n\n      document.onmouseup = function (e) {\n        _this.isActive = false;\n        var nowDetailpannelWidth = parseInt(detailpannel.style.width.replace('px', ''));\n\n        if (nowDetailpannelWidth !== _this.detailWidth) {\n          _this.detailWidth = nowDetailpannelWidth;\n        }\n      };\n    },\n    onResizeMouseMove: function onResizeMouseMove(e, preDetailWidth, detailpannel, resizer) {\n      if (e.witch === 0) {\n        this.isActive = false;\n      }\n\n      if (this.isActive) {\n        this.endX = e.clientX;\n        var nowDetailpannelWidth = parseInt(detailpannel.style.width.replace('px', ''));\n\n        if (nowDetailpannelWidth <= this.MAX_DETAIL_WIDTH && nowDetailpannelWidth >= this.MIN_DETAIL_WIDTH) {\n          detailpannel.style.width = preDetailWidth + this.startX - this.endX + 'px';\n          resizer.style.right = preDetailWidth + this.startX - this.endX + 'px';\n        }\n\n        nowDetailpannelWidth = parseInt(detailpannel.style.width.replace('px', ''));\n        var nowResizerRight = parseInt(resizer.style.right.replace('px', ''));\n\n        if (nowDetailpannelWidth > this.MAX_DETAIL_WIDTH) {\n          detailpannel.style.width = \"\".concat(this.MAX_DETAIL_WIDTH, \"px\");\n          resizer.style.right = \"\".concat(this.MAX_DETAIL_WIDTH, \"px\");\n        } else if (nowDetailpannelWidth < this.MIN_DETAIL_WIDTH || nowResizerRight < this.MIN_DETAIL_WIDTH) {\n          detailpannel.style.width = \"\".concat(this.MIN_DETAIL_WIDTH, \"px\");\n          resizer.style.right = \"\".concat(this.MIN_DETAIL_WIDTH, \"px\");\n        }\n      }\n    }\n  }\n};",null]}