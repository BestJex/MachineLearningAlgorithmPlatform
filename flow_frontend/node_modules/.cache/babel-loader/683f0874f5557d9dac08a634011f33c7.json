{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\hover-edge.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\behavior\\hover-edge.js","mtime":1592804685680},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport Util from '@antv/g6/src/util';\nimport eventBus from \"@/utils/eventBus\";\nexport default {\n  getEvents: function getEvents() {\n    return {\n      'edge:mouseover': 'onMouseover',\n      'edge:mouseleave': 'onMouseleave',\n      \"edge:click\": \"onClick\"\n    };\n  },\n  onMouseover: function onMouseover(e) {\n    var self = this;\n    var item = e.item;\n    var graph = self.graph;\n\n    if (item.hasState('selected')) {\n      return;\n    } else {\n      if (self.shouldUpdate.call(self, e)) {\n        graph.setItemState(item, 'hover', true);\n      }\n    }\n\n    graph.paint();\n  },\n  onMouseleave: function onMouseleave(e) {\n    var self = this;\n    var item = e.item;\n    var graph = self.graph;\n    var group = item.getContainer();\n    group.find(function (g) {\n      if (g._attrs.isInPoint || g._attrs.isOutPoint) {\n        g.attr(\"fill\", \"#fff\");\n      }\n    });\n\n    if (self.shouldUpdate.call(self, e)) {\n      if (!item.hasState('selected')) graph.setItemState(item, 'hover', false);\n    }\n\n    graph.paint();\n  },\n  onClick: function onClick(e) {\n    var self = this;\n    var item = e.item;\n    var graph = self.graph;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var selectedNodes = graph.findAllByState('node', 'selected');\n    Util.each(selectedNodes, function (node) {\n      graph.setItemState(node, 'selected', false);\n    });\n\n    if (!self.keydown || !self.multiple) {\n      var selected = graph.findAllByState('edge', 'selected');\n      Util.each(selected, function (edge) {\n        if (edge !== item) {\n          graph.setItemState(edge, 'selected', false);\n        }\n      });\n    }\n\n    if (item.hasState('selected')) {\n      if (self.shouldUpdate.call(self, e)) {\n        graph.setItemState(item, 'selected', false);\n      }\n\n      eventBus.$emit('nodeselectchange', {\n        target: item,\n        select: false\n      });\n    } else {\n      if (self.shouldUpdate.call(self, e)) {\n        graph.setItemState(item, 'selected', true);\n      }\n\n      console.log(item, item.getModel());\n      eventBus.$emit('nodeselectchange', {\n        target: item,\n        select: true\n      });\n    }\n\n    graph.setAutoPaint(autoPaint);\n    graph.paint();\n  }\n};",null]}