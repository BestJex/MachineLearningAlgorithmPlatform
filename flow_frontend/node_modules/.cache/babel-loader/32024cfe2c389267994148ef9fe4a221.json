{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Base\\Editor.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Base\\Editor.js","mtime":1592804685682},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"W:\\\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"W:\\\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\\\MachineLearningAlgorithmPlatform\\\\flow_frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport { uniqueId } from '@/utils';\nimport eventBus from \"@/utils/eventBus\";\nimport store from \"@/store\";\n\nvar Editor =\n/*#__PURE__*/\nfunction () {\n  function Editor() {\n    _classCallCheck(this, Editor);\n\n    store.dispatch('app/uniqueId');\n    this.id = store.state.app.max_id;\n  }\n\n  _createClass(Editor, [{\n    key: \"getGrpah\",\n    value: function getGrpah() {\n      return this.graph;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event, params) {\n      if (event === 'afterAddPage') {\n        this.graph = params.graph;\n      }\n\n      eventBus.$emit(event, params);\n    }\n  }, {\n    key: \"on\",\n    value: function on(event) {\n      switch (event) {\n        case 'changeNodeData':\n          this.graph.refresh();\n          break;\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(type, item) {\n      this.graph.add(type, item);\n    }\n  }, {\n    key: \"update\",\n    value: function update(item, model) {\n      this.graph.update(item, model);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      var node = this.graph.findById(item.id);\n      this.graph.remove(node);\n    }\n  }]);\n\n  return Editor;\n}();\n\nexport { Editor as default };",null]}