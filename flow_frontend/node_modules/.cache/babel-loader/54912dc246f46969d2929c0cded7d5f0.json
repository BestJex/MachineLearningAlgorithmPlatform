{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Flow\\customNode.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\components\\Flow\\customNode.js","mtime":1592804685685},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport G6 from \"@antv/g6/build/g6\";\nimport { uniqueId } from '@/utils';\nimport Shape from '@antv/g/src/shapes';\nimport okSvg from '@/assets/icons/ok.svg';\nimport loadingSvg from '@/assets/icons/loading.svg';\nimport store from \"@/store\";\nvar customNode = {\n  init: function init() {\n    G6.registerNode(\"customNode\", {\n      draw: function draw(cfg, group) {\n        var size = cfg.size;\n\n        if (!size) {\n          size = [170, 34];\n        } // 此处必须是NUMBER 不然bbox不正常\n\n\n        var width = parseInt(size[0]);\n        var height = parseInt(size[1]);\n        var color = cfg.color; // 此处必须有偏移 不然drag-node错位\n\n        var offsetX = -width / 2;\n        var offsetY = -height / 2;\n        store.dispatch('app/uniqueId');\n        var mainId = 'rect' + store.state.app.max_id;\n        var shape = group.addShape(\"rect\", {\n          attrs: {\n            id: mainId,\n            x: offsetX,\n            y: offsetY,\n            width: width,\n            height: height,\n            stroke: \"#ced4d9\",\n            fill: '#fff',\n            //此处必须有fill 不然不能触发事件\n            radius: 4\n          }\n        });\n        group.addShape(\"rect\", {\n          attrs: {\n            x: offsetX,\n            y: offsetY,\n            width: 4,\n            height: height,\n            fill: color,\n            parent: mainId,\n            radius: [4, 0, 0, 4]\n          }\n        });\n        group.addShape(\"image\", {\n          attrs: {\n            x: offsetX + 16,\n            y: offsetY + 8,\n            width: 20,\n            height: 16,\n            img: cfg.image,\n            parent: mainId\n          }\n        });\n\n        if (cfg.status) {\n          group.addShape(\"image\", {\n            attrs: {\n              x: offsetX + width - 32,\n              y: offsetY + 8,\n              width: 16,\n              height: 16,\n              parent: mainId,\n              img: cfg.status == 'complete' ? okSvg : cfg.status == 'loading' ? loadingSvg : ''\n            }\n          });\n        }\n\n        if (cfg.backImage) {\n          var clip = new Shape.Rect({\n            attrs: {\n              x: offsetX,\n              y: offsetY,\n              width: width,\n              height: height,\n              fill: '#fff',\n              radius: 4\n            }\n          });\n          group.addShape(\"image\", {\n            attrs: {\n              x: offsetX,\n              y: offsetY,\n              width: width,\n              height: height,\n              img: cfg.backImage,\n              clip: clip\n            }\n          });\n        }\n\n        cfg.node_detail.forEach(function (detail) {\n          if (detail.name == 'name') {\n            store.dispatch('app/uniqueId');\n            group.addShape('text', {\n              attrs: {\n                id: 'label' + store.state.app.max_id,\n                x: offsetX + width / 2,\n                y: offsetY + height / 2,\n                textAlign: \"center\",\n                textBaseline: \"middle\",\n                text: detail.value,\n                parent: mainId,\n                fill: \"#565758\"\n              }\n            });\n          }\n        });\n\n        if (cfg.point_detail) {\n          cfg.point_detail.forEach(function (point) {\n            var x,\n                y = 0;\n\n            if (point.type === 'input') {\n              // 添加入度\n              y = 0;\n              x = width * point.proportion;\n              store.dispatch('app/uniqueId');\n              var outId = store.state.app.max_id;\n              store.dispatch('app/uniqueId');\n              var id = point.id ? point.id : 'circle' + store.state.app.max_id;\n              group.addShape('circle', {\n                attrs: {\n                  id: 'circle' + outId,\n                  parent: id,\n                  x: x + offsetX,\n                  y: y + offsetY,\n                  r: 10,\n                  isInPointOut: true,\n                  func: point.func,\n                  fill: '#1890ff',\n                  opacity: 0\n                }\n              });\n              group.addShape(\"circle\", {\n                attrs: {\n                  id: id,\n                  x: x + offsetX,\n                  y: y + offsetY,\n                  r: 3,\n                  isInPoint: true,\n                  func: point.func,\n                  fill: \"#fff\",\n                  stroke: \"#1890ff\",\n                  opacity: 0\n                }\n              }); // todo 有两个circle\n\n              point.id = id;\n            } else if (point.type === 'output') {\n              // 添加出度\n              y = height;\n              x = width * point.proportion;\n              store.dispatch('app/uniqueId');\n              var _outId = store.state.app.max_id;\n              store.dispatch('app/uniqueId');\n\n              var _id = point.id ? point.id : 'circle' + store.state.app.max_id;\n\n              group.addShape(\"circle\", {\n                attrs: {\n                  id: 'circle' + _outId,\n                  parent: _id,\n                  x: x + offsetX,\n                  y: y + offsetY,\n                  r: 10,\n                  isOutPointOut: true,\n                  func: point.func,\n                  fill: \"#1890ff\",\n                  opacity: 0 //默認0 需要時改成0.3\n\n                }\n              });\n              group.addShape('text', {\n                attrs: {\n                  size: 12,\n                  parent: _id,\n                  x: x + offsetX,\n                  y: y + offsetY + 15,\n                  isOutPointText: true,\n                  textAlign: 'center',\n                  textBaseline: 'bottom',\n                  text: point.name,\n                  fill: '#1890ff',\n                  opacity: 0\n                }\n              });\n              group.addShape(\"circle\", {\n                attrs: {\n                  id: _id,\n                  x: x + offsetX,\n                  y: y + offsetY,\n                  r: 3,\n                  isOutPoint: true,\n                  func: point.func,\n                  fill: \"#fff\",\n                  stroke: \"#1890ff\",\n                  opacity: 0\n                }\n              });\n              point.id = _id;\n            }\n          });\n        }\n\n        return shape;\n      },\n      //设置状态\n      setState: function setState(name, value, item) {\n        var group = item.getContainer();\n        var shape = group.get(\"children\")[0]; // 顺序根据 draw 时确定\n\n        var children = group.findAll(function (g) {\n          return g._attrs.parent === shape._attrs.id;\n        });\n        var circles = group.findAll(function (circle) {\n          return circle._attrs.isInPoint || circle._attrs.isOutPoint;\n        });\n\n        var selectStyles = function selectStyles() {\n          shape.attr(\"fill\", \"#f3f9ff\");\n          shape.attr(\"stroke\", \"#6ab7ff\");\n          shape.attr(\"cursor\", \"move\");\n          children.forEach(function (child) {\n            child.attr(\"cursor\", \"move\");\n          });\n          circles.forEach(function (circle) {\n            circle.attr('opacity', 1);\n          });\n        };\n\n        var unSelectStyles = function unSelectStyles() {\n          shape.attr(\"fill\", \"#fff\");\n          shape.attr(\"stroke\", \"#ced4d9\");\n          circles.forEach(function (circle) {\n            circle.attr('opacity', 0);\n          });\n        };\n\n        switch (name) {\n          case \"selected\":\n          case \"hover\":\n            if (value) {\n              selectStyles();\n            } else {\n              unSelectStyles();\n            }\n\n            break;\n        }\n      }\n    });\n  }\n};\nexport default customNode;",null]}