{"remainingRequest":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\store\\modules\\user.js","dependencies":[{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\src\\store\\modules\\user.js","mtime":1592804685694},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"W:\\ArtificialIntelligenceOpenPlatformOfNankaiUniversity\\MachineLearningAlgorithmPlatform\\flow_frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import auth from '@/utils/auth';\nimport userApi from '@/api/user.js';\nimport WebSocket from '@/mixin/socket';\nimport { Message } from 'element-ui';\nimport jwt from '@/utils/jwt';\nvar state = {\n  token: auth.getToken(),\n  userId: auth.getToken() ? jwt.payload_decode(auth.getToken()).userId : 0,\n  username: auth.getToken() ? jwt.payload_decode(auth.getToken()).username : ''\n};\nvar mutations = {\n  SET_USERNAME: function SET_USERNAME(state, username) {\n    state.username = username;\n  },\n  SET_USERID: function SET_USERID(state, userId) {\n    state.userId = userId;\n  },\n  SET_TOKEN: function SET_TOKEN(state, token) {\n    state.token = token;\n  }\n};\nvar actions = {\n  // 登录\n  Login: function Login(_ref, data) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve, reject) {\n      userApi.login(data).then(function (res) {\n        res = res.data;\n        auth.setToken(res.token);\n        commit('SET_TOKEN', res.token);\n        commit('SET_USERNAME', res.username);\n        commit('SET_USERID', res.userId);\n        WebSocket.initWebSocket();\n        resolve();\n      }).catch(function (err) {\n        Message({\n          message: err.data,\n          type: 'error',\n          duration: 3 * 1000\n        });\n        reject(err);\n      });\n    });\n  },\n  Register: function Register(_ref2, data) {\n    var commit = _ref2.commit;\n    return new Promise(function (resolve, reject) {\n      userApi.register(data).then(function (res) {\n        res = res.data;\n        auth.setToken(res.token);\n        commit('SET_TOKEN', res.token);\n        commit('SET_USERNAME', res.username);\n        commit('SET_USERID', res.userId);\n        WebSocket.initWebSocket();\n        resolve();\n      }).catch(function (err) {\n        Message({\n          message: err.data,\n          type: 'error',\n          duration: 3 * 1000\n        });\n        reject(err);\n      });\n    });\n  },\n  Logout: function Logout(_ref3) {\n    var commit = _ref3.commit;\n    return new Promise(function (resolve, reject) {\n      auth.removeToken();\n      commit('SET_TOKEN', null);\n      commit('SET_USERNAME', '');\n      commit('SET_USERID', 0);\n      resolve();\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}